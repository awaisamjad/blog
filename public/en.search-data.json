{"/blog/advent-of-code/":{"data":{"":"","#":"This is a collection of my solutions to the Advent of Code challenges. I will be using various languages to solve the challenges. I will be updating this page as I complete more challenges. "},"title":"Advent of Code"},"/blog/advent-of-code/rust/2023/day-1/":{"data":{"":"fn main() { println!(\"Hello, world!\"); } "},"title":"Day 1"},"/blog/advent-of-code/rust/2023/day-2/":{"data":{"#":"Part 1Step 1 Get the Advent of Code input. Mine looks like the following:\n\"3x12x15\\n 24x25x17\\n 14x6x11\\n\" ... Step 2 Add that to a string\nlet input = String::from(\" \"3x12x15\\n 24x25x17\\n 14x6x11\\n\" ... \") Step 3 We need to seperate each box‚Äôs dimension from others so will add them as values to an empty list\nDeclare a mutable empty list\nlet mut values = vec![]; Then we will iterate over the each character in the input. If this character is equal to the line break then we will res","part-1#Part 1":"","part-2#Part 2":" "},"title":"Day 2"},"/blog/projects/":{"data":{"":"This is a collection of projects I‚Äôve worked on. Some are still in development, while others are complete.\nThe projects contain the following information:\nObjective : What the project is trying to achieve\nTools : The tools/technologies used to build the project"},"title":"Projects"},"/blog/projects/book-reader/":{"data":{"":"","#":" ‚ö†Ô∏è This project is still in development Technologies used Tauri A toolkit for building desktop apps with web technologies The backend is made with Rust The frontend is made with Svelte\nIntroduction This project is a book reader that allows you to read books in a variety of formats. It is designed to be easy to use and to provide a pleasant reading experience. The project is still in development and is not ready for use.\nGitHub Prerequisites Knowledge of Rust Knowledge of HTML, CSS and JavaScript or a Framework like Svelte Setup Project Structure Technologies used Steps Conclusion "},"title":"Book Reader"},"/blog/projects/lexer/":{"data":{"":" ‚ö†Ô∏è This project is still in development "},"title":"Lexer"},"/blog/projects/movie-web-app/":{"data":{"":" ‚ö†Ô∏è This project is still in development ","objective#Objective":"The Aim of this project is to create a web application that allows users to search for movies and view them via the web application.","steps#Steps":" 1 This is the first step.\n2 This is the second step.","technologies#Technologies":"Frontend SvelteKit CSS for styling Backend Node.js Database SupaBase API The Movie Database API VidSrc this api is used to get the movie and tv show videos based on their TMDB id. "},"title":"Movie Web App"},"/blog/projects/neural-network/":{"data":{"":"Hello"},"title":"Neural Network"},"/blog/projects/processing-clone/":{"data":{"":" ‚ö†Ô∏è This project is still in development ","description#Description":"This project is a simple attempt to create a processing clone\nIf you havent tried processing check it out at Processing\nAs per the website, Processing is a flexible software sketchbook and a language for learning how to code and was my first introduction to programming in 2021. I used it during university and learnt many fundamnetal concepts such as variables, loops, functions, classes etc.\nYou can create many visual elements and shapes such as squares, lines, texts and basically do stuff with them\nBelow is a GIF of it in action\nüö´ Insert GIF ","how-it-works#How it works":"Processing itself isnt open source so we cant look at the code used to make it. But that doesnt mean we cant figure out how it basically works.\nThe text editor This is the main part of the processing apllication and where you write the code. At the top we can see some buttons, a run and stop button etc\nüö´ Insert Image The Output Window This is the output of what we instructed our code to do. Its the visual stuff\nüö´ Insert Image Interpreter Before our code can actually do something, it needs to be interpreted by another language to create a window with what we want. I dont know what language processing uses but for our clone we will be using Rust.\nbelow is a list of the technologies/tools we will be using\nTechnologies/Tools Tauri - A framework for building tiny, blazingly fast binaries for all major desktop platforms. Frontend : Vanilla JavaScript Backend : Rust MiniFb - A cross platform library written in Rust that makes it easy to setup a window and to display a 32-bit pixel buffer. This will be used to make our graphics window WC Monaco Editor - An easy embed of the Monaco Editor. The Monaco Editor was made by Microsoft and is used by VSCode ","prerequisites#Prerequisites":"We can now start getting our tools\nRust This is the first step.\nTauri This is the second step.\nWC Monaco Editor "},"title":"Processing Clone"},"/blog/projects/resistor-resistance-calculator/":{"data":{"":"","#":"Introduction This is a tutorial to calculate the resistance of a resistor. When i work on any electronics project and forget what the resistance of the resistor im using is i end up having to look it up. I then thought that this would be a good quick project to do.\nGitHub Prerequisites Basic JavaScript and HTML Understanding of how to calculate the resistance of a resistor through their colour bands Technologies used Any JavaScript framework or Vanilla JS can be used but we will be using Svelte Setup Step 1 Open your terminal/command prompt and navigate to where you want to create your project\nStep 2 Run the following command where resistor-resistance-calculator is the name of the project\nnpm create svelte@latest resistor-resistance-calculator Step 3 Navigate into the directory and pen with your favourite code editor/IDE. I use VSCode\ncd resistor-resistance-calculator code . Project Structure Your project structure should look something like this (depending on the options you chose) .svelte-kit favicon.png assets node_modules src _index.md lib index.js routes +page.svelte app.html static favicon.png .gitignore .npmrc .prettierignore .prettierrc package-lock.json README.md svelte.config.js vite.config.js We‚Äôre gonna write our code in the +page.svelte file in the routes folder\nLogic Before we start writing our code, lets plan out what our app should generally look like.\nResistor\nWe want to have buttons, a result area to see the resistance and a resistor image that changes based on the colour selected from the buttons.\nCode Step 1 The first three bands have the same colours which correspond to the same numbers. Therefore we can reuse this object for each band.\nAs each colour corresponds/maps directly to 1 number a dictionary/hashmap/object is the perfect data structure to hold this data.\nconst value_to_colour = { 0: '#141412', 1: '#744418', 2: '#A71717', 3: '#D4770D', 4: '#D6D600', 5: '#206916', 6: '#0E1A63', 7: '#5B106E', 8: '#797979', 9: '#FAFAFA' }; Band 4 on the other hand will be slightly different so we can create its own Object\nconst band4_value_to_colour = { 0: '#d9bb7a', 1: '#744418', 2: '#A71717', 0.5: '#206916', 0.25: '#0E1A63', 0.1: '#5B106E', 0.05: '#797979', 5: '#FFD700', 10: '#FAFAFA' }; Step 2 Next we will create a main div to hold everything and a band-select div to hold our dropdown buttons for each band. For the dropdown button we will use a \u003cselect\u003e tag which has \u003coption\u003e tags as children\n\u003cdiv\u003e \u003clabel for=\"band1\" class=\"label\"\u003eBand 1\u003c/label\u003e \u003cselect id=\"select-band1\" name=\"band1\" class=\"select\" \u003e \u003coption value=\"0\" style=\"background-color: #141412; color: white;\"\u003eBlack\u003c/option\u003e \u003coption value=\"1\" style=\"background-color: #744418; color: white;\"\u003eBrown\u003c/option\u003e \u003coption value=\"2\" style=\"background-color: #A71717; color: white;\"\u003eRed\u003c/option\u003e \u003coption value=\"3\" style=\"background-color: #D4770D; color: white;\"\u003eOrange\u003c/option\u003e \u003coption value=\"4\" style=\"background-color: #D6D600; color: white;\"\u003eYellow\u003c/option\u003e \u003coption value=\"5\" style=\"background-color: #206916; color: white;\"\u003eGreen\u003c/option\u003e \u003coption value=\"6\" style=\"background-color: #0E1A63; color: white;\"\u003eBlue\u003c/option\u003e \u003coption value=\"7\" style=\"background-color: #5B106E; color: white;\"\u003eViolet\u003c/option\u003e \u003coption value=\"8\" style=\"background-color: #797979; color: white;\"\u003eGrey\u003c/option\u003e \u003coption value=\"9\" style=\"background-color: #FAFAFA; color: black;\"\u003eWhite\u003c/option\u003e \u003c/select\u003e \u003c/div\u003e Notice that we made the color : black for option 9 as the background is white\nRepeat the code for bands 2 and 3. For band 4 make sure to change the colours.\nStep 3 Now we need a image of a resistor. We are gonna change the colour of the bands through the dropdown options. Therefore the best image format would be an svg. Find any SVG online or make you own. The one i used can be downloaded from here : Resistor SVG\nStep 4 Paste the svg code or link it in your html.\nStep 5 Now let‚Äôs focus on the logic of our app. Depending on the colors chosen, we need to calculate the resistance. Here‚Äôs how it works:\nThe first band represents the units. The second band represents the tens. The third band represents the power to which the value is raised. Example Let Band 1 is Red, Band 2 is Brown, and Band 3 is Violet, the values would be: Band 1 = 2, Band 2 = 10, and Band 3 = 7.\nTo calculate the resistance, we add Band 1 and Band 2 to get 12, and then multiply it by $(10^7)$.\nResistors arent perfect components so therefore have some error. We handle this by inlcuding a tolerance which is shown through the 4th band. Let our 4th band be green. Therefore it has a ¬± 0.5 % tolerance. When we work thios out our we get the following : 210000000 ohms ¬± 1050000 ohms\nConclusion "},"title":"Resistor Resistance Calculator"}}